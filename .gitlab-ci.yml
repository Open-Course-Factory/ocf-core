variables:
  KUBE_CONTEXT: ci-cd-chihi-mecheri-michel-gueye/ocf-core
  HELM_RELEASE_NAME: "ocf-core"   
  HELM_NAMESPACE: "default"       
stages:
  #- build
  - test
  - deploy

#include:
  #- template: Jobs/Build.gitlab-ci.yml

#build:
  #before_script:
   # - touch ./src/auth/casdoor/token_jwt_key.pem
  #rules:
   # - if: '$CI_COMMIT_REF_NAME == "test-mame"'

test-k8s:
  stage: test
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config use-context $KUBE_CONTEXT:k3d-connection
    - kubectl get pods
    - kubectl get nodes

  rules:
    - if: '$CI_COMMIT_REF_NAME == "test-mame"'

# Déploiement des services Kubernetes
deploy-k8s:
  stage: deploy
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y curl apt-transport-https gnupg lsb-release
    # Installer Kubectl
    - echo "Installation de kubectl"
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl && kubectl version --client
    # Installer Helm
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod +x get_helm.sh
    - ./get_helm.sh
  script:
   
    - kubectl config use-context $KUBE_CONTEXT:k3d-connection
    - kubectl get all -n "$HELM_NAMESPACE"
    - kubectl get deployments -A
    - kubectl get pods -A
    - kubectl get pvc -A
    - kubectl get pv
    - kubectl get crds

 # Désinstallation propre des releases Helm (si elles existent)
    - helm list -n "$HELM_NAMESPACE" | grep -q "$HELM_RELEASE_NAME" && helm uninstall "$HELM_RELEASE_NAME" -n "$HELM_NAMESPACE" --no-hooks || echo "Helm release not found, skipping uninstall"
    - helm list -n "$HELM_NAMESPACE" | grep -q "casdoor" && helm uninstall casdoor -n "$HELM_NAMESPACE" --no-hooks || true
    - helm list -n "$HELM_NAMESPACE" | grep -q "postgres" && helm uninstall postgres -n "$HELM_NAMESPACE" --no-hooks || true

    # Suppression des ressources si elles existent
    - kubectl get deployments -n "$HELM_NAMESPACE" | grep -qE "ocf-core|casdoor|postgres" && kubectl delete deployment ocf-core casdoor postgres -n "$HELM_NAMESPACE" --force --grace-period=0 || true
    - kubectl get pods -n "$HELM_NAMESPACE" && kubectl delete pod -n "$HELM_NAMESPACE" --all --force --grace-period=0 || true
    - kubectl get pvc -n "$HELM_NAMESPACE" && kubectl delete pvc --all -n "$HELM_NAMESPACE" --wait=false || true
    - kubectl get pv | grep -q "Released" && kubectl delete pv --all --force --grace-period=0 || true

    # Suppression des CRDs bloquantes
    - |
      for crd in $(kubectl get crds | grep -E "casdoor|ocf-core|postgres" | awk '{print $1}'); do
        kubectl delete crd $crd || true
      done
 
      #deploiement
    - helm upgrade --install "$HELM_RELEASE_NAME" ./charts/ocf-core --namespace "$HELM_NAMESPACE" --values ./charts/ocf-core/values.yaml --force

    #Check
    - kubectl get pods -n "$HELM_NAMESPACE"
    - kubectl get pvc -n "$HELM_NAMESPACE"
    - kubectl get pv

  rules:
    - if: '$CI_COMMIT_REF_NAME == "test-mame"'
