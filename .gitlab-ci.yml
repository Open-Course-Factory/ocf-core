default:
  tags:
    - ocf-core

variables:
  # PostgreSQL configuration for tests
  POSTGRES_DB: ocf_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgrespass"
  POSTGRES_HOST: postgres
  POSTGRES_PORT: "5432"
  POSTGRES_SSLMODE: disable
  GO_VERSION: "1.24"

stages:
  - test
  - build

# Entity Management Tests with PostgreSQL
test:entity-management:
  stage: test
  image: golang:${GO_VERSION}

  services:
    - postgres

  variables:
    POSTGRES_DB: ocf_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "postgrespass"

  before_script:
    # Wait for PostgreSQL to be ready (service starts automatically)
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    - |
      echo "⏳ Waiting for PostgreSQL service to be ready..."
      for i in $(seq 1 30); do
        if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c '\q' 2>/dev/null; then
          echo "✅ PostgreSQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ PostgreSQL failed to start after 30 seconds"
          exit 1
        fi
        sleep 1
      done
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    # Run all tests (SQLite + PostgreSQL)
    - echo "📦 Compiling tests..."
    - go test -c -o entity_tests.exe ./tests/entityManagement

    - echo "🧪 Running SQLite-based tests..."
    - ./entity_tests.exe -test.v -test.timeout=60s -test.run "TestGeneric|TestEntityRegistration|TestSecurity|TestIntegration" 2>&1 | tee sqlite_tests.log

    - echo "🐘 Running PostgreSQL-specific tests..."
    - ./entity_tests.exe -test.v -test.timeout=60s -test.run "TestPostgres" 2>&1 | tee postgres_tests.log

    - echo "📊 Generating coverage and test reports..."
    - go test -v -coverprofile=coverage.out ./tests/entityManagement -timeout=90s 2>&1 | tee full_tests.log
    - cat full_tests.log | go-junit-report -set-exit-code > report.xml

  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'

  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.out
    paths:
      - coverage.out
      - report.xml
      - sqlite_tests.log
      - postgres_tests.log
      - full_tests.log
    expire_in: 1 week

  only:
    - merge_requests
    - main
    - develop

# Quick validation (no PostgreSQL)
test:quick:
  stage: test
  image: golang:${GO_VERSION}

  before_script:
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    - echo "⚡ Running quick tests..."
    - go test -c -o entity_tests.exe ./tests/entityManagement
    - ./entity_tests.exe -test.v -test.short -test.timeout=30s 2>&1 | tee quick_tests.log
    - cat quick_tests.log | go-junit-report -set-exit-code > quick_report.xml

  artifacts:
    reports:
      junit: quick_report.xml
    paths:
      - quick_report.xml
      - quick_tests.log
    expire_in: 1 week

  only:
    - merge_requests

# Race detector
test:race:
  stage: test
  image: golang:${GO_VERSION}

  services:
    - postgres

  variables:
    POSTGRES_DB: ocf_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "postgrespass"

  before_script:
    # Wait for PostgreSQL to be ready (service starts automatically)
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    - |
      echo "⏳ Waiting for PostgreSQL service to be ready..."
      for i in $(seq 1 30); do
        if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c '\q' 2>/dev/null; then
          echo "✅ PostgreSQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ PostgreSQL failed to start after 30 seconds"
          exit 1
        fi
        sleep 1
      done
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    - echo "🏁 Running race detector..."
    - go test -c -race -o entity_tests_race.exe ./tests/entityManagement
    - ./entity_tests_race.exe -test.v -test.timeout=120s 2>&1 | tee race_tests.log
    - cat race_tests.log | go-junit-report -set-exit-code > race_report.xml

  artifacts:
    reports:
      junit: race_report.xml
    paths:
      - race_report.xml
      - race_tests.log
    expire_in: 1 week

  only:
    - merge_requests
    - main

build:
  stage: build
  before_script:
    - echo $token_jwt_key | base64 -d > ./token_jwt_key.pem

include:
  - template: Jobs/Build.gitlab-ci.yml
