variables:
  KUBE_CONTEXT: ci-cd-chihi-mecheri-michel-gueye/ocf-core
  HELM_RELEASE_NAME: "ocf-core"   
  HELM_NAMESPACE: "default"       
stages:
  #- build
  - test
  - deploy

#include:
  #- template: Jobs/Build.gitlab-ci.yml

#build:
  #before_script:
   # - touch ./src/auth/casdoor/token_jwt_key.pem
  #rules:
   # - if: '$CI_COMMIT_REF_NAME == "test-mame"'

test-k8s:
  stage: test
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config use-context $KUBE_CONTEXT:k3d-connection
    - kubectl get pods
    - kubectl get nodes

  rules:
    - if: '$CI_COMMIT_REF_NAME == "test-mame"'

# Déploiement des services Kubernetes
deploy-k8s:
  stage: deploy
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y curl apt-transport-https gnupg lsb-release
    # Installer Kubectl
    - echo "Installation de kubectl"
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl && kubectl version --client
    # Installer Helm
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod +x get_helm.sh
    - ./get_helm.sh
  script:
    - kubectl version --client
    - helm version
    - kubectl config use-context $KUBE_CONTEXT:k3d-connection

    # Afficher l'état des ressources avant de modifier quoi que ce soit
    - kubectl get pods -n "$HELM_NAMESPACE"
    - kubectl get pvc -n "$HELM_NAMESPACE"

    # Étape 1 : Désinstaller la release Helm si elle existe
    - helm list -n "$HELM_NAMESPACE" | grep -q "$HELM_RELEASE_NAME" && helm uninstall "$HELM_RELEASE_NAME" -n "$HELM_NAMESPACE" || echo "Helm release not found, skipping uninstall"

    #  Étape 2 : Supprimer les Deployments
    - kubectl delete deployment casdoor-db casdoor ocf-core postgres -n "$HELM_NAMESPACE" --ignore-not-found=true
    - sleep 5  # Attente pour éviter les erreurs

    #  Étape 3 : Supprimer les Pods restants s'ils existent encore
    - kubectl delete pod -n "$HELM_NAMESPACE" --all --force --grace-period=0
    - sleep 5  # Laisser Kubernetes nettoyer

    #  Étape 4 : Supprimer les PVC (persistent volume claims)
    - kubectl delete pvc --all -n "$HELM_NAMESPACE" --wait=false
    - sleep 5

    # Vérifier s'il reste des PVC en "Terminating" et forcer la suppression
    - for pvc in $(kubectl get pvc -n "$HELM_NAMESPACE" --no-headers -o custom-columns=":metadata.name"); do
        kubectl patch pvc $pvc -n "$HELM_NAMESPACE" -p '{"metadata":{"finalizers":null}}' --type=merge || true;
      done

    #  Étape 5 : Supprimer les PV orphelins
    - for pv in $(kubectl get pv --no-headers | awk '$3=="Released" {print $1}'); do
        kubectl delete pv $pv;
      done

    # Vérifier que tout est bien supprimé
    - kubectl get deployments -n "$HELM_NAMESPACE"
    - kubectl get pods -n "$HELM_NAMESPACE"
    - kubectl get pvc -n "$HELM_NAMESPACE"

 
      #deploiement
    - helm upgrade --install "$HELM_RELEASE_NAME" ./charts/ocf-core --namespace "$HELM_NAMESPACE" --values ./charts/ocf-core/values.yaml --force

    #Check
    - kubectl get pods -n "$HELM_NAMESPACE"
    - kubectl get pvc -n "$HELM_NAMESPACE"
    - kubectl get pv

  rules:
    - if: '$CI_COMMIT_REF_NAME == "test-mame"'
