default:
  tags:
    - ocf-core

variables:
  # PostgreSQL configuration for tests
  POSTGRES_DB: ocf_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgrespass"
  POSTGRES_HOST: postgres
  POSTGRES_PORT: "5432"
  POSTGRES_SSLMODE: disable
  GO_VERSION: "1.24"

stages:
  - test
  - build

# Entity Management Tests with PostgreSQL
test:entity-management:
  stage: test
  image: golang:${GO_VERSION}

  services:
    - postgres

  variables:
    POSTGRES_DB: ocf_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "postgrespass"

  before_script:
    # Wait for PostgreSQL to be ready (service starts automatically)
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    - |
      echo "⏳ Waiting for PostgreSQL service to be ready..."
      for i in $(seq 1 30); do
        if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c '\q' 2>/dev/null; then
          echo "✅ PostgreSQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ PostgreSQL failed to start after 30 seconds"
          exit 1
        fi
        sleep 1
      done
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    # Run all tests (SQLite + PostgreSQL)
    - echo "📦 Compiling tests..."
    - go test -c -o entity_tests.exe ./tests/entityManagement

    - echo "🧪 Running SQLite-based tests..."
    - ./entity_tests.exe -test.v -test.timeout=60s -test.run "TestGeneric|TestEntityRegistration|TestSecurity|TestIntegration" 2>&1 | tee sqlite_tests.log

    - echo "🐘 Running PostgreSQL-specific tests..."
    - ./entity_tests.exe -test.v -test.timeout=60s -test.run "TestPostgres" 2>&1 | tee postgres_tests.log

    - echo "📊 Generating coverage and test reports..."
    - go test -v -coverprofile=coverage.out ./tests/entityManagement -timeout=90s 2>&1 | tee full_tests.log
    - cat full_tests.log | go-junit-report -set-exit-code > report.xml

  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'

  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.out
    paths:
      - coverage.out
      - report.xml
      - sqlite_tests.log
      - postgres_tests.log
      - full_tests.log
    expire_in: 1 week

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Course Tests
test:courses:
  stage: test
  image: golang:${GO_VERSION}

  before_script:
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    - echo "📚 Running course tests..."
    - go test -v -timeout=60s ./tests/courses/... 2>&1 | tee courses_tests.log
    - cat courses_tests.log | go-junit-report -set-exit-code > courses_report.xml

  artifacts:
    reports:
      junit: courses_report.xml
    paths:
      - courses_report.xml
      - courses_tests.log
    expire_in: 1 week

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Quick validation (no PostgreSQL)
test:quick:
  stage: test
  image: golang:${GO_VERSION}

  before_script:
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    - echo "⚡ Running quick tests..."
    - go test -c -o entity_tests.exe ./tests/entityManagement
    - ./entity_tests.exe -test.v -test.short -test.timeout=30s 2>&1 | tee quick_tests.log
    - cat quick_tests.log | go-junit-report -set-exit-code > quick_report.xml

  artifacts:
    reports:
      junit: quick_report.xml
    paths:
      - quick_report.xml
      - quick_tests.log
    expire_in: 1 week

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Race detector
test:race:
  stage: test
  image: golang:${GO_VERSION}

  services:
    - postgres

  variables:
    POSTGRES_DB: ocf_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "postgrespass"

  before_script:
    # Wait for PostgreSQL to be ready (service starts automatically)
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    - |
      echo "⏳ Waiting for PostgreSQL service to be ready..."
      for i in $(seq 1 30); do
        if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c '\q' 2>/dev/null; then
          echo "✅ PostgreSQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ PostgreSQL failed to start after 30 seconds"
          exit 1
        fi
        sleep 1
      done
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    - echo "🏁 Running race detector..."
    - go test -c -race -o entity_tests_race.exe ./tests/entityManagement
    - ./entity_tests_race.exe -test.v -test.timeout=120s 2>&1 | tee race_tests.log
    - cat race_tests.log | go-junit-report -set-exit-code > race_report.xml

  artifacts:
    reports:
      junit: race_report.xml
    paths:
      - race_report.xml
      - race_tests.log
    expire_in: 1 week

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

# Auth Tests with Casdoor
test:auth:
  stage: test
  image: docker:24-dind

  services:
    - docker:24-dind

  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    # PostgreSQL connection via docker network
    POSTGRES_DB: ocf_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "postgres"
    POSTGRES_HOST: ocf-postgres-test
    POSTGRES_PORT: "5432"
    POSTGRES_SSLMODE: disable
    # Casdoor connection (loaded from .env.test file in container)
    CASDOOR_ENDPOINT: "http://ocf-casdoor-test:8000"

  before_script:
    # Install docker-compose, wget, and postgresql-client
    - apk add --no-cache docker-compose postgresql-client wget bash

    # Install Go 1.24 (Alpine's go package is too old)
    - wget https://go.dev/dl/go1.24.1.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go1.24.1.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - export GOPATH=/go
    - export PATH=$PATH:/go/bin
    - go version

    # Create JWT certificate from GitLab CI variable
    - echo $token_jwt_key | base64 -d > ./src/auth/casdoor/token_jwt_key.pem

    # Start services in order (manually to respect dependencies)
    - echo "🐳 Starting database services first..."
    - docker-compose -f docker-compose.test.yml up -d postgres-test casdoor-db-test
    - echo "⏳ Waiting for databases to initialize..."
    - sleep 15

    # Now start Casdoor after MySQL is ready
    - echo "🐳 Starting Casdoor..."
    - docker-compose -f docker-compose.test.yml up -d casdoor-test
    - echo "⏳ Waiting for Casdoor to start..."
    - sleep 10

    # Wait for services
    - |
      echo "⏳ Waiting for PostgreSQL to be ready..."
      for i in $(seq 1 30); do
        if docker exec ocf-postgres-test pg_isready -U postgres 2>/dev/null; then
          echo "✅ PostgreSQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ PostgreSQL failed to start"
          docker-compose -f docker-compose.test.yml logs postgres-test
          exit 1
        fi
        sleep 1
      done
    - |
      echo "⏳ Waiting for MySQL (Casdoor DB) to be ready..."
      for i in $(seq 1 30); do
        if docker exec ocf-casdoor-db-test mysqladmin ping -h localhost --silent 2>/dev/null; then
          echo "✅ MySQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ MySQL failed to start"
          docker-compose -f docker-compose.test.yml logs casdoor-db-test
          exit 1
        fi
        sleep 1
      done
    - |
      echo "⏳ Waiting for Casdoor to be ready..."
      for i in $(seq 1 90); do
        if docker exec ocf-casdoor-test wget --spider -q http://localhost:8000/api/get-account 2>/dev/null; then
          echo "✅ Casdoor is ready!"
          break
        fi
        if [ $i -eq 90 ]; then
          echo "❌ Casdoor failed to start"
          docker-compose -f docker-compose.test.yml logs casdoor-test
          docker-compose -f docker-compose.test.yml logs casdoor-db-test
          exit 1
        fi
        sleep 2
      done

    # Install Go dependencies
    - go mod download
    - go install github.com/jstemmer/go-junit-report/v2@latest

  script:
    - echo "🔐 Running auth tests..."
    # Run tests inside docker network to access services
    # Note: Casdoor config loaded from .env.test file inside container
    - |
      docker run --rm \
        --network ocf-core_test-network \
        -v $(pwd):/workspace \
        -w /workspace \
        -e POSTGRES_DB=$POSTGRES_DB \
        -e POSTGRES_USER=$POSTGRES_USER \
        -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
        -e POSTGRES_HOST=$POSTGRES_HOST \
        -e POSTGRES_PORT=$POSTGRES_PORT \
        -e POSTGRES_SSLMODE=$POSTGRES_SSLMODE \
        -e CASDOOR_ENDPOINT=$CASDOOR_ENDPOINT \
        golang:1.24.1 \
        sh -c "go test -v -timeout=120s ./tests/auth/... 2>&1 | tee auth_tests.log"
    - cat auth_tests.log | go-junit-report -set-exit-code > auth_report.xml

  after_script:
    - docker-compose -f docker-compose.test.yml down -v || true

  artifacts:
    reports:
      junit: auth_report.xml
    paths:
      - auth_report.xml
      - auth_tests.log
    expire_in: 1 week

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

build:
  stage: build
  before_script:
    - echo $token_jwt_key | base64 -d > ./token_jwt_key.pem

include:
  - template: Jobs/Build.gitlab-ci.yml
